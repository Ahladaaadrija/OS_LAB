#include <stdio.h>

int main() {
    int n, m, i, j, k;

    // Input number of processes and resources
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    int allocation[n][m], max[n][m], need[n][m], available[m];

    // Input Available resources
    printf("Enter available resources:\n");
    for (i = 0; i < m; i++) {
        scanf("%d", &available[i]);
    }

    // Input Allocation Matrix
    printf("Enter allocation matrix:\n");
    for (i = 0; i < n; i++) {
        printf("For process P%d: ", i);
        for (j = 0; j < m; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Input Max Matrix
    printf("Enter max matrix:\n");
    for (i = 0; i < n; i++) {
        printf("For process P%d: ", i);
        for (j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Calculate Need Matrix = Max - Allocation
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Banker's Algorithm
    int finish[n], safeSeq[n], work[m];
    for (i = 0; i < n; i++) finish[i] = 0;
    for (i = 0; i < m; i++) work[i] = available[i];

    int count = 0;
    while (count < n) {
        int found = 0;
        for (i = 0; i < n; i++) {
            if (!finish[i]) {
                int canRun = 1;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        canRun = 0;
                        break;
                    }
                }
                if (canRun) {
                    for (k = 0; k < m; k++)
                        work[k] += allocation[i][k];
                    safeSeq[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("System is in unsafe state.\n");
            return 0;
        }
    }

    // Print Safe Sequence
    printf("System is in safe state.\nSafe sequence: ");
    for (i = 0; i < n; i++) {
        printf("P%d ", safeSeq[i]);
    }
    printf("\n");

    return 0;
}
